{"version":3,"sources":["components/Dialogs/Dialogs.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","DialogItem","name","id","className","c","dialog","src","alt","to","Message","message","maxLength50","maxLengthCreator","reduxForm","form","handleSubmit","onSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogs","messages","sendMessage","dialogsItems","map","d","m","values","newMessageBody","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dialogsPage","actions","WrappedComponent","props","restProps"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,iCCApM,SAASC,EAAyBC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IACIE,EAAKC,EADLC,ECHS,SAAuCJ,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EDTM,CAA6BJ,EAAQC,GAGlD,GAAIK,OAAOI,sBAAuB,CAChC,IAAIC,EAAmBL,OAAOI,sBAAsBV,GAEpD,IAAKG,EAAI,EAAGA,EAAIQ,EAAiBH,OAAQL,IACvCD,EAAMS,EAAiBR,GACnBF,EAASQ,QAAQP,IAAQ,GACxBI,OAAOM,UAAUC,qBAAqBC,KAAKd,EAAQE,KACxDE,EAAOF,GAAOF,EAAOE,IAIzB,OAAOE,E,qHEGMW,EAXwB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,GAC3C,OACI,sBAAKC,UAAWC,IAAEC,OAAlB,UACI,qBAAKC,IAAI,6DAA6DC,IAAI,KAC1E,cAAC,IAAD,CAASC,GAAE,mBAAcN,GAAzB,SACKD,QCFFQ,EAR8B,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAC3C,OACI,qBAAKP,UAAWC,IAAEM,QAAlB,SACKA,K,kCCGPC,EAAcC,YAAiB,IAetBC,cAAoC,CAACC,KAAM,wBAA3CD,EAbuD,SAAC,GAAoB,IAAnBE,EAAkB,EAAlBA,aACpE,OACI,uBAAMC,SAAUD,EAAhB,UACI,8BACI,cAACE,EAAA,EAAD,CAAOhB,KAAK,iBAAiBiB,UAAWC,IAAUC,SAAU,CAACC,IAAUV,GAAcW,YAAY,yBAErG,8BACI,kDCkBDC,EApBuB,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,YAMvD,OACI,sBAAKvB,UAAWC,IAAEoB,QAAlB,UACI,qBAAKrB,UAAWC,IAAEuB,aAAlB,SACKH,EAAQI,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAY5B,KAAM4B,EAAE5B,KAAMC,GAAI2B,EAAE3B,IAAS2B,EAAE3B,SAEjE,qBAAKC,UAAWC,IAAEqB,SAAlB,SACKA,EAASG,KAAI,SAAAE,GAAC,OAAI,cAAC,EAAD,CAASpB,QAASoB,EAAEpB,SAAcoB,EAAE5B,SAE3D,cAAC,EAAD,CAAqBc,SAZZ,SAAEe,GACfL,EAAYK,EAAOC,uB,sDCXrBC,EAA6B,SAAEC,GACjC,MAAO,CACHC,OAAQD,EAAME,KAAKD,S,YC0BZE,sBACXC,aAjBoB,SAAEJ,GAEtB,MAAO,CACHV,QAASU,EAAMK,YAAYf,QAC3BC,SAAUS,EAAMK,YAAYd,YAa8D,CAAEC,YAAac,IAAQd,eDtBlH,SAAgCe,GASnC,OAFuCH,YAA6CL,EAA7CK,EANI,SAACI,GAEPA,EAAzBP,OAAR,IAAmBQ,EAAnB,YAAiCD,EAAjC,GACA,OAAOA,EAAMP,OAAS,cAACM,EAAD,eAAsBE,IAAuB,cAAC,IAAD,CAAUnC,GAAI,iBCiB1E6B,CAGbd","file":"static/js/4.62b86fc2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__ajg_m\",\"dialogsItems\":\"Dialogs_dialogsItems__3J-8b\",\"dialog\":\"Dialogs_dialog__rYQ-Z\",\"active\":\"Dialogs_active__32sKX\",\"messages\":\"Dialogs_messages__2Wgme\",\"message\":\"Dialogs_message__2uAzm\"};","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, {FC} from \"react\";\r\nimport c from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogItem: FC<DialogItemType> = ({name, id}) => {\r\n    return (\r\n        <div className={c.dialog}>\r\n            <img src=\"https://topmsg.ru/wp-content/uploads/whatsapp-avatar-1.png\" alt=\"\"/>\r\n            <NavLink to={`/dialogs/${id}`}>\r\n                {name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;\r\n","import c from \"../Dialogs.module.css\";\r\nimport React, {FC} from \"react\";\r\nimport {MessageType} from \"../../../types/types\";\r\n\r\nconst Message: FC<Omit<MessageType, 'id'>> = ({message}) => {\r\n    return (\r\n        <div className={c.message}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\";\r\nimport React, {FC} from \"react\";\r\n\r\n// Данные, собираемые формой\r\ntype AddMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);   // Форма не будет сабмитится просто\r\n\r\nlet AddMessageForm: FC<InjectedFormProps<AddMessageFormValuesType>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name='newMessageBody' component={Textarea} validate={[required, maxLength50]} placeholder='Enter your message' />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddMessageFormValuesType>({form: 'dialogAddMessageForm'})(AddMessageForm);","import React, {FC} from \"react\";\r\nimport c from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogType, MessageType} from \"../../types/types\";\r\nimport AddMessageReduxForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\ntype DialogsPropsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    sendMessage: ( messageText: string ) => void\r\n}\r\n\r\ntype NewMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: FC<DialogsPropsType> = ({dialogs, messages, sendMessage}) => {\r\n\r\n    const onSubmit = ( values: NewMessageFormType ) => { // сидят все данные полей после submit, обращаемся к name поля чтобы достать конкретное\r\n        sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={c.dialogs}>\r\n            <div className={c.dialogsItems}>\r\n                {dialogs.map(d => <DialogItem name={d.name} id={d.id} key={d.id} />)}\r\n            </div>\r\n            <div className={c.messages}>\r\n                {messages.map(m => <Message message={m.message} key={m.id} />)}\r\n            </div>\r\n            <AddMessageReduxForm onSubmit={onSubmit} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n","import React, {ComponentType, FC} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = ( state: AppStateType ): MapPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n//WCP-wrappedComponent props\r\nexport function WithAuthRedirect<WCP>( WrappedComponent: ComponentType<WCP> ) {  //HOC не прокидывает пропосв в целевую компоненту\r\n    const ComponentWrapper: FC<MapPropsType> = (props) => {  // создаёт для целевой компоненты контейнерную компоненту и возвращает её\r\n        // не нужно во WrappedComponent засовывать isAuth\r\n        const { isAuth, ...restProps } = props;\r\n        return props.isAuth ? <WrappedComponent {...restProps as WCP} /> : <Redirect to={'/login/'} />\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent = connect<MapPropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect)(ComponentWrapper);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n","import Dialogs from \"./Dialogs\";\r\nimport { actions } from \"../../redux/dialogs-reducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { WithAuthRedirect } from \"../../hoc/WithAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {DialogType, MessageType} from \"../../types/types\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    sendMessage: ( messageText: string ) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n    // пропсы, которые передали через атрибуты в теге\r\n}\r\n\r\nconst mapStateToProps = ( state: AppStateType ): MapStatePropsType => {\r\n    // state === store.getState()\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages\r\n    }\r\n}\r\n\r\n// const AuthRedirectComponent = WithAuthRedirect(Dialogs);\r\n\r\n// в качестве пропсов передаёт объект возвращаемый из f1() и f2(). f1-пропсы, f2-колбэки\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n// connect подписывается на изменение стейта, когда он меняется заново вызывается f1() и формируется новый объект, сравниваясь со старым\r\n\r\n// export default DialogsContainer;\r\n\r\nexport default compose(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, { sendMessage: actions.sendMessage }),\r\n    WithAuthRedirect\r\n)(Dialogs); // Возьмёт Dialogs и закинет в вызов функции WithAuthRedirect, потом === connect(mapStateToProps, mapDispatchToProps)(WithAuthRedirect(Dialogs))\r\n"],"sourceRoot":""}