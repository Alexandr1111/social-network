{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","redux/selectors/my-posts-selectors.ts","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","value","onChange","e","onBlur","updateStatus","autoFocus","onDoubleClick","ProfileDataReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","Field","name","placeholder","component","Input","validate","type","Textarea","contacts","map","className","c","contact","s","formSummaryError","btn","ProfileData","isOwner","activateEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","onClick","Contact","href","rel","ProfileInfo","savePhoto","saveProfile","descriptionBlock","src","photos","large","user","alt","mainPhoto","files","initialValues","formData","then","Post","message","likeCount","item","maxLength10","maxLengthCreator","AddNewPostReduxForm","required","MyPosts","memo","posts","addPost","postsBlock","values","newPostText","p","id","getPosts","state","profilePage","getNewPostText","MyPostsContainer","connect","actions","addPostActionCreator","Profile","Preloader","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","restProps","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.48858a74.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProfileInfo_profile__1Jaem\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2gyzB\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1nLwb\",\"contact\":\"ProfileInfo_contact__2JW-A\",\"contactValue\":\"ProfileInfo_contactValue__7_F_p\",\"btn\":\"ProfileInfo_btn__35r8e\"};","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2BACy\",\"posts\":\"MyPosts_posts__2x3M3\",\"btn\":\"MyPosts_btn__16twG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1nQ7J\"};","import React, {useState, useEffect, FC, ChangeEvent} from \"react\";\r\n\r\ntype P = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatus: FC<P> = (props) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {editMode\r\n                ? <span>\r\n                    <input value={status} onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus />\r\n                  </span>\r\n                : <span>\r\n                    <span onDoubleClick={activateEditMode}>{status || '-----'}</span>\r\n                  </span>}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus;\r\n","import React, {FC} from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport c from \"./ProfileInfo.module.css\";\r\nimport s from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype ProfileDataFormOwnPropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType & ProfileDataFormOwnPropsType> & ProfileDataFormOwnPropsType> = ({handleSubmit, profile, error}) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <b>Full name</b>: <Field name='fullName' placeholder='Full name' component={Input} validate={[]} />\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: <Field name='lookingForAJob' component='input' type='checkbox' validate={[]} />\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>: <Field name='lookingForAJobDescription' placeholder='My professional skills' component={Textarea} validate={[]} />\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: <Field name='aboutMe' placeholder='About me' component={Textarea} validate={[]} />\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                    return <div key={key} className={c.contact}>\r\n                            <b>{key}</b>: <Field name={\"contacts.\" + key} placeholder={key} component={Input} validate={[]} />\r\n                           </div>\r\n            })}\r\n            </div>\r\n            {error &&\r\n            <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <button className={c.btn}>save</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileType, any>({form: 'edit-profile'})(ProfileDataForm);\r\nexport default ProfileDataReduxForm;","import React, {ChangeEvent, FC, useState} from \"react\";\r\nimport c from \"./ProfileInfo.module.css\";\r\nimport user from \"../../../assets/images/user.png\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = ( formData: ProfileType ) => {\r\n        saveProfile(formData)\r\n            .then(() => setEditMode(false));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {/*<img src=\"https://www.talkwalker.com/images/2020/blog-headers/image-analysis.png\" alt=\"\"/>*/}\r\n            </div>\r\n            <div className={c.descriptionBlock}>\r\n                <img src={profile.photos.large || user} alt=\"\" className={c.mainPhoto}/>\r\n                {isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n                <div>\r\n                    <div>\r\n                        <b>Status</b>: <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n                    </div>\r\n                    {editMode\r\n                        ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                        : <ProfileData profile={profile} isOwner={isOwner} activateEditMode={() => setEditMode(true)} />}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    activateEditMode: () => void\r\n}\r\n\r\nconst ProfileData: FC<ProfileDataPropsType> = ({profile, isOwner, activateEditMode}) => {\r\n    return (\r\n        <>\r\n            <div>\r\n                <b>FullName</b>: {profile.fullName && profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills</b>: {profile.lookingForAJobDescription && profile.lookingForAJobDescription}\r\n            </div>}\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe && profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n            })}\r\n            </div>\r\n            {isOwner &&<div>\r\n                <button className={c.btn} onClick={activateEditMode}>Редактировать</button>\r\n            </div>}\r\n        </>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={c.contact}>\r\n            <b>{contactTitle}</b>: <a className={c.contactValue} href={contactValue} target='_blank' rel='noreferrer'><b>{contactValue}</b></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React, {FC} from \"react\";\r\nimport c from \"./Post.module.css\";\r\nimport {PostType} from \"../../../../types/types\";\r\n\r\nconst Post: FC<Omit<PostType, 'id'>> = ({message, likeCount}) => {\r\n    return (\r\n        <div className={c.item}>\r\n            <img src=\"https://i.pinimg.com/236x/c2/af/09/c2af0941a9eace5f0ba3dc63284d3860--mr-bean-funny-color-blue.jpg\" alt=\"\"/>\r\n            {message}\r\n            <div>\r\n                <span>{likeCount}♥</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n","import React, {FC, memo} from \"react\";\r\nimport c from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);   // Форма не будет сабмитится просто\r\n\r\ntype AddNewPostFormType = {\r\n    newPostText: string\r\n}\r\n\r\nlet AddNewPostForm: FC<InjectedFormProps<AddNewPostFormType>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name='newPostText' component={Textarea} validate={[required, maxLength10]} />\r\n            </div>\r\n            <div>\r\n                <button className={c.btn} type='submit'>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddNewPostFormType>({form: 'addPost'})(AddNewPostForm);\r\n\r\ntype MyPostsType = {\r\n    posts: Array<PostType>\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: FC<MyPostsType> = memo(({posts, addPost}) => {\r\n\r\n    const onAddPost = ( values: AddNewPostFormType ) => {\r\n        addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={c.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddNewPostReduxForm onSubmit={onAddPost} />\r\n            </div>\r\n            <div className={c.posts}>\r\n                {posts.map(p => <Post key={p.id} message={p.message} likeCount={p.likeCount} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts;\r\n","import {AppStateType} from \"../redux-store\";\r\n\r\nexport const getPosts = ( state: AppStateType ) => {\r\n    return state.profilePage.posts;\r\n}\r\n\r\nexport const getNewPostText = ( state: AppStateType ) => {\r\n    return state.profilePage.newPostText;\r\n}","import MyPosts from \"./MyPosts\";\r\nimport { actions } from \"../../../redux/profile-reducer\";\r\nimport { connect } from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {getNewPostText, getPosts} from \"../../../redux/selectors/my-posts-selectors\";\r\n\r\n// const MyPostsContainer = () => {\r\n//\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 (store) => {\r\n//                     const state = store.getState();\r\n//\r\n//                     const addPost = () => {\r\n//                         store.dispatch(addPostActionCreator());   // нарушается принцип single responsibility. Компонент не должен думать над тем какой-объект создать как {type:ADD-POST}\r\n//                     }\r\n//\r\n//                     const onPostChange = text => {\r\n//                         const action = updateNewPostTextActionCreator(text);\r\n//                         store.dispatch(action);\r\n//                     }\r\n//\r\n//                     return <MyPosts posts={state.profilePage.posts} newPostText={state.profilePage.newPostText} addPost={addPost} updateNewPostText={onPostChange} />\r\n//\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\ntype MapStateType = ReturnType<typeof mapStateToProps>;\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (body: string) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n\r\n}\r\n\r\nconst mapStateToProps = ( state: AppStateType ) => {\r\n    return {\r\n        posts: getPosts(state),\r\n        newPostText: getNewPostText(state)\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapStateType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps,\r\n    { addPost: actions.addPostActionCreator })(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React, {FC} from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../types/types\";\r\nimport c from \"./ProfileInfo/ProfileInfo.module.css\";\r\n\r\nexport type ProfilePropsType = {\r\n    status: string\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photoFile: File) => void\r\n    saveProfile: (profileData: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: FC<ProfilePropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n    return profile ? (\r\n        <div className={c.profile}>\r\n            <ProfileInfo\r\n                profile={profile}\r\n                isOwner={isOwner}\r\n                status={status}\r\n                updateStatus={updateStatus}\r\n                savePhoto={savePhoto}\r\n                saveProfile={saveProfile}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    ) : <Preloader />\r\n}\r\n\r\nexport default Profile;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Profile from \"./Profile\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>;\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photoFile: File) => void\r\n    saveProfile: (profileData: ProfileType) => any\r\n}\r\n\r\ntype OwnPropsType = {\r\n\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype P = MapStatePropsType & MapDispatchPropsType & OwnPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends Component<P> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.error('ID should exists');\r\n        }\r\n        else {\r\n            this.props.getUserProfile(userId);\r\n            this.props.getStatus(userId);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: P, prevState: P) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { profile, status, updateStatus, savePhoto, saveProfile, ...restProps } = this.props;\r\n        return <Profile\r\n            profile={profile}\r\n            status={status}\r\n            updateStatus={updateStatus}\r\n            isOwner={!this.props.match.params.userId}\r\n            savePhoto={savePhoto}\r\n            saveProfile={saveProfile}\r\n            {...restProps}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ( state: AppStateType ) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n// const AuthRedirectComponent = WithAuthRedirect(ProfileContainer);\r\n\r\n// const WithURLDataContainerComponent = withRouter(AuthRedirectComponent); // HOC(компонент, который возвращает новый компонент) занимается закидыванием данных из урла\r\n\r\n// export default connect( mapStateToProps, { getUserProfile } )(WithURLDataContainerComponent);\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>( mapStateToProps,\r\n        { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } ),\r\n    withRouter\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}