{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","value","onChange","e","target","onBlur","updateStatus","autoFocus","onDoubleClick","ProfileInfo","profile","isOwner","savePhoto","src","alt","className","c","descriptionBlock","photos","large","user","mainPhoto","type","files","length","fullName","Post","message","likeCount","item","maxLength10","maxLengthCreator","AddNewPostForm","onSubmit","handleSubmit","Field","name","component","Textarea","validate","required","reduxForm","form","MyPosts","posts","addPost","postsBlock","values","newPostText","map","p","MyPostsContainer","connect","state","profilePage","dispatch","body","addPostActionCreator","Profile","Preloader","ProfileContainer","userId","this","match","params","authorizedUserId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,iBAAmB,sCAAsC,UAAY,iC,oBCAvFD,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,oBCAnED,EAAOC,QAAU,CAAC,KAAO,qB,6ICoCVC,EAnCO,SAACC,GACnB,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BF,mBAASD,EAAMI,QAA3C,mBAAOA,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAeV,OACI,8BACKF,EACK,8BACE,uBAAOK,MAAOH,EAAQI,SARf,SAACC,GACpBJ,EAAUI,EAAEC,OAAOH,QAOyCI,OAbrC,WACvBR,GAAY,GACZH,EAAMY,aAAaR,IAWqES,WAAS,MAEvF,8BACE,sBAAMC,cApBG,WACrBX,GAAY,IAmBA,SAAwCC,GAAU,eCAvDW,EAzBK,SAAC,GAAyD,IAAxDC,EAAuD,EAAvDA,QAASZ,EAA8C,EAA9CA,OAAQQ,EAAsC,EAAtCA,aAAcK,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,UAQ1D,OACI,gCACI,8BACI,qBAAKC,IAAI,yEAAyEC,IAAI,OAE1F,sBAAKC,UAAWC,IAAEC,iBAAlB,UACI,qBAAKJ,IAAKH,EAAQQ,OAAOC,OAASC,IAAMN,IAAI,GAAGC,UAAWC,IAAEK,YAC3DV,GAAW,uBAAOW,KAAK,OAAOpB,SAbf,SAACC,GACrBA,EAAEC,OAAOmB,MAAMC,QACfZ,EAAUT,EAAEC,OAAOmB,MAAM,OAYrB,8BACKb,EAAQe,WAEb,cAAC,EAAD,CAAe3B,OAAQA,EAAQQ,aAAcA,W,oCCT9CoB,EAZF,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,UACpB,OACI,sBAAKb,UAAWC,IAAEa,KAAlB,UACI,qBAAKhB,IAAI,oGAAoGC,IAAI,KAChHa,EACD,8BACI,iCAAOC,EAAP,kB,kCCFVE,EAAcC,YAAiB,IAEjCC,EAAiB,SAACtC,GAClB,OACI,uBAAMuC,SAAUvC,EAAMwC,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,KAAK,cAAcC,UAAWC,IAAUC,SAAU,CAACC,IAAUV,OAExE,8BACI,wBAAQR,KAAK,SAAb,4BAMhBU,EAAiBS,YAAU,CAACC,KAAM,WAAjBD,CAA6BT,GAE9C,IAmBeW,EAnBC,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QAMrB,OACI,sBAAK9B,UAAWC,IAAE8B,WAAlB,UACI,0CACA,8BACI,cAAC,EAAD,CAAgBb,SARV,SAAAc,GACdF,EAAQE,EAAOC,kBASX,qBAAKjC,UAAWC,IAAE4B,MAAlB,SACKA,EAAMK,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAMvB,QAASuB,EAAEvB,QAASC,UAAWsB,EAAEtB,qB,QCSxDuB,EAFUC,aAfD,SAAAC,GACpB,MAAO,CACHT,MAAOS,EAAMC,YAAYV,MACzBI,YAAaK,EAAMC,YAAYN,gBAIZ,SAAAO,GACvB,MAAO,CACHV,QAAS,SAAAW,GACLD,EAASE,YAAqBD,QAKjBJ,CAA6CT,G,QC9BvDe,EATC,SAAC,GAAyD,IAAxDhD,EAAuD,EAAvDA,QAASZ,EAA8C,EAA9CA,OAAQQ,EAAsC,EAAtCA,aAAcK,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,UACtD,OAAOF,EACH,gCACI,cAAC,EAAD,CAAaA,QAASA,EAASC,QAASA,EAASb,OAAQA,EAAQQ,aAAcA,EAAcM,UAAWA,IACxG,cAAC,EAAD,OAEJ,cAAC+C,EAAA,EAAD,K,eCJFC,E,oKAEF,WACI,IAAIC,EAASC,KAAKpE,MAAMqE,MAAMC,OAAOH,OAChCA,IACDA,EAASC,KAAKpE,MAAMuE,kBAExBH,KAAKpE,MAAMwE,eAAeL,GAC1BC,KAAKpE,MAAMyE,UAAUN,K,+BAGzB,WACIC,KAAKM,mB,gCAGT,SAAmBC,EAAWC,GACtBR,KAAKpE,MAAMqE,MAAMC,OAAOH,QAAUQ,EAAUN,MAAMC,OAAOH,QACzDC,KAAKM,mB,oBAIb,WACI,MAAqDN,KAAKpE,MAAlDgB,EAAR,EAAQA,QAASZ,EAAjB,EAAiBA,OAAQQ,EAAzB,EAAyBA,aAAcM,EAAvC,EAAuCA,UACvC,OAAO,cAAC,EAAD,aACHF,QAASA,EACTZ,OAAQA,EACRQ,aAAcA,EACdK,SAAUmD,KAAKpE,MAAMqE,MAAMC,OAAOH,OAClCjD,UAAWA,GACPkD,KAAKpE,Y,GA7BU6E,aAiDhBC,sBACXpB,aAhBoB,SAAAC,GACpB,MAAO,CACH3C,QAAS2C,EAAMC,YAAY5C,QAC3BZ,OAAQuD,EAAMC,YAAYxD,OAC1BmE,iBAAkBZ,EAAMoB,KAAKZ,OAC7Ba,OAAQrB,EAAMoB,KAAKC,UAWG,CAAER,mBAAgBC,cAAW7D,iBAAcM,gBACrE+D,IAFWH,CAGbZ","file":"static/js/3.0a540e14.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2gyzB\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1nLwb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2BACy\",\"posts\":\"MyPosts_posts__2x3M3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1nQ7J\"};","import React, { useState, useEffect } from \"react\";\r\n\r\nconst ProfileStatus = (props) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMode\r\n                ? <div>\r\n                    <input value={status} onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus />\r\n                  </div>\r\n                : <div>\r\n                    <span onDoubleClick={activateEditMode}>{status || '-----'}</span>\r\n                  </div>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus;\r\n","import React from \"react\";\r\nimport c from \"./ProfileInfo.module.css\";\r\nimport user from \"../../../assets/images/user.png\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto}) => {\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src=\"https://www.talkwalker.com/images/2020/blog-headers/image-analysis.png\" alt=\"\" />\r\n            </div>\r\n            <div className={c.descriptionBlock}>\r\n                <img src={profile.photos.large || user} alt=\"\" className={c.mainPhoto} />\r\n                {isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\r\n                <div>\r\n                    {profile.fullName}\r\n                </div>\r\n                <ProfileStatus status={status} updateStatus={updateStatus} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from \"react\";\r\nimport c from \"./Post.module.css\";\r\n\r\nconst Post = ({message, likeCount}) => {\r\n    return (\r\n        <div className={c.item}>\r\n            <img src=\"https://i.pinimg.com/236x/c2/af/09/c2af0941a9eace5f0ba3dc63284d3860--mr-bean-funny-color-blue.jpg\" alt=\"\"/>\r\n            {message}\r\n            <div>\r\n                <span>{likeCount}♥</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport c from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);   // Форма не будет сабмитится просто\r\n\r\nlet AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name='newPostText' component={Textarea} validate={[required, maxLength10]} />\r\n            </div>\r\n            <div>\r\n                <button type='submit'>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddNewPostForm = reduxForm({form: 'addPost'})(AddNewPostForm);\r\n\r\nconst MyPosts = ({posts, addPost}) => {\r\n\r\n    const onAddPost = values => {\r\n        addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={c.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddNewPostForm onSubmit={onAddPost} />\r\n            </div>\r\n            <div className={c.posts}>\r\n                {posts.map(p => <Post message={p.message} likeCount={p.likeCount} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;\r\n","import MyPosts from \"./MyPosts\";\r\nimport { addPostActionCreator } from \"../../../redux/profile-reducer\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// const MyPostsContainer = () => {\r\n//\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 (store) => {\r\n//                     const state = store.getState();\r\n//\r\n//                     const addPost = () => {\r\n//                         store.dispatch(addPostActionCreator());   // нарушается принцип single responsibility. Компонент не должен думать над тем какой-объект создать как {type:ADD-POST}\r\n//                     }\r\n//\r\n//                     const onPostChange = text => {\r\n//                         const action = updateNewPostTextActionCreator(text);\r\n//                         store.dispatch(action);\r\n//                     }\r\n//\r\n//                     return <MyPosts posts={state.profilePage.posts} newPostText={state.profilePage.newPostText} addPost={addPost} updateNewPostText={onPostChange} />\r\n//\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addPost: body => {\r\n            dispatch(addPostActionCreator(body));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\nconst Profile = ({profile, status, updateStatus, isOwner, savePhoto}) => {\r\n    return profile ? (\r\n        <div>\r\n            <ProfileInfo profile={profile} isOwner={isOwner} status={status} updateStatus={updateStatus} savePhoto={savePhoto} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    ) : <Preloader />\r\n}\r\n\r\nexport default Profile;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Profile from \"./Profile\";\r\nimport {getStatus, getUserProfile, savePhoto, updateStatus} from \"../../redux/profile-reducer\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\n\r\nclass ProfileContainer extends Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { profile, status, updateStatus, savePhoto } = this.props;\r\n        return <Profile\r\n            profile={profile}\r\n            status={status}\r\n            updateStatus={updateStatus}\r\n            isOwner={!this.props.match.params.userId}\r\n            savePhoto={savePhoto}\r\n            {...this.props}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n// const AuthRedirectComponent = WithAuthRedirect(ProfileContainer);\r\n\r\n// const WithURLDataContainerComponent = withRouter(AuthRedirectComponent); // HOC(компонент, который возвращает новый компонент) занимается закидыванием данных из урла\r\n\r\n// export default connect( mapStateToProps, { getUserProfile } )(WithURLDataContainerComponent);\r\n\r\nexport default compose(\r\n    connect( mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto } ),\r\n    withRouter\r\n)(ProfileContainer);\r\n\r\n"],"sourceRoot":""}