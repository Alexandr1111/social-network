{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","hoc/WithAuthRedirect.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","name","id","className","c","dialog","src","alt","to","Message","message","maxLength50","maxLengthCreator","AddMessageForm","props","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","reduxForm","form","Dialogs","dialogsPage","sendMessage","isAuth","dialogs","dialogsItems","map","d","messages","m","values","newMessageBody","mapStateToPropsForRedirect","state","auth","compose","connect","dispatch","sendMessageCreator","Component","ComponentWrapper","this","React"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,6FCcpMC,EAXI,SAAC,GAAgB,IAAfC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,GACvB,OACI,sBAAKC,UAAWC,IAAEC,OAAlB,UACI,qBAAKC,IAAI,6DAA6DC,IAAI,KAC1E,cAAC,IAAD,CAASC,GAAE,mBAAcN,GAAzB,SACKD,QCEFQ,EARC,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACd,OACI,qBAAKP,UAAWC,IAAEM,QAAlB,SACKA,K,kCCDPC,EAAcC,YAAiB,IAEjCC,EAAiB,SAACC,GAClB,OACI,uBAAMC,SAAUD,EAAME,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOhB,KAAK,iBAAiBiB,UAAWC,IAAUC,SAAU,CAACC,IAAUV,GAAcW,YAAY,yBAErG,8BACI,uDAMDT,IAAiBU,YAAU,CAACC,KAAM,wBAAjBD,CAA0CV,GCM3DY,EApBC,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,YAAyB,EAAZC,OAMxC,OACI,sBAAKzB,UAAWC,IAAEyB,QAAlB,UACI,qBAAK1B,UAAWC,IAAE0B,aAAlB,SACKJ,EAAYG,QAAQE,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAY/B,KAAM+B,EAAE/B,KAAMC,GAAI8B,EAAE9B,IAAS8B,EAAE9B,SAE7E,qBAAKC,UAAWC,IAAE6B,SAAlB,SACKP,EAAYO,SAASF,KAAI,SAAAG,GAAC,OAAI,cAAC,EAAD,CAASxB,QAASwB,EAAExB,SAAcwB,EAAEhC,SAEvE,cAAC,EAAD,CAAgBa,SAZF,SAAAoB,GAClBR,EAAYQ,EAAOC,uB,gECLrBC,EAA6B,SAAAC,GAC/B,MAAO,CACHV,OAAQU,EAAMC,KAAKX,S,OCuBZY,sBACXC,aAxBoB,SAAAH,GAEpB,MAAO,CACHZ,YAAaY,EAAMZ,gBAIA,SAAAgB,GACvB,MAAO,CACHf,YAAa,SAAAS,GACTM,EAASC,YAAmBP,UDNR,SAACQ,GAAe,IACtCC,EADqC,4JAEvC,WACI,OAAOC,KAAKhC,MAAMc,OAAS,cAACgB,EAAD,eAAeE,KAAKhC,QAAY,cAAC,IAAD,CAAUN,GAAI,gBAHtC,GACZuC,IAAMH,WAQrC,OAFuCH,YAAQJ,EAARI,CAAoCI,KCYhEL,CAGbf","file":"static/js/4.a71d0468.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__ajg_m\",\"dialogsItems\":\"Dialogs_dialogsItems__3J-8b\",\"dialog\":\"Dialogs_dialog__rYQ-Z\",\"active\":\"Dialogs_active__32sKX\",\"messages\":\"Dialogs_messages__2Wgme\",\"message\":\"Dialogs_message__2uAzm\"};","import React from \"react\";\r\nimport c from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = ({name, id}) => {\r\n    return (\r\n        <div className={c.dialog}>\r\n            <img src=\"https://topmsg.ru/wp-content/uploads/whatsapp-avatar-1.png\" alt=\"\"/>\r\n            <NavLink to={`/dialogs/${id}`}>\r\n                {name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;\r\n","import c from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\nconst Message = ({message}) => {\r\n    return (\r\n        <div className={c.message}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import {Field, reduxForm} from \"redux-form\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\";\r\nimport React from \"react\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);   // Форма не будет сабмитится просто\r\n\r\nlet AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name='newMessageBody' component={Textarea} validate={[required, maxLength50]} placeholder='Enter your message' />\r\n            </div>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddMessageForm = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm);\r\n","import React from \"react\";\r\nimport c from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\nconst Dialogs = ({dialogsPage, sendMessage, isAuth}) => {\r\n\r\n    const AddNewMessage = values => { // сидят все данные полей после submit, обращаемся к name поля чтобы достать конкретное\r\n        sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={c.dialogs}>\r\n            <div className={c.dialogsItems}>\r\n                {dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id} key={d.id} />)}\r\n            </div>\r\n            <div className={c.messages}>\r\n                {dialogsPage.messages.map(m => <Message message={m.message} key={m.id} />)}\r\n            </div>\r\n            <AddMessageForm onSubmit={AddNewMessage} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToPropsForRedirect = state => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const WithAuthRedirect = (Component) => {\r\n    class ComponentWrapper extends React.Component {  // создаёт для целевой компоненты контейнерную компоненту и возвращает её\r\n        render() {\r\n            return this.props.isAuth ? <Component {...this.props} /> : <Redirect to={'/login/'} />\r\n        }\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(ComponentWrapper);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n","import Dialogs from \"./Dialogs\";\r\nimport { sendMessageCreator } from \"../../redux/dialogs-reducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { WithAuthRedirect } from \"../../hoc/WithAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nconst mapStateToProps = state => {\r\n    // state === store.getState()\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        sendMessage: newMessageBody => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n// const AuthRedirectComponent = WithAuthRedirect(Dialogs);\r\n\r\n// в качестве пропсов передаёт объект возвращаемый из f1() и f2(). f1-пропсы, f2-колбэки\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n// connect подписывается на изменение стейта, когда он меняется заново вызывается f1() и формируется новый объект, сравниваясь со старым\r\n\r\n// export default DialogsContainer;\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs); // Возьмёт Dialogs и закинет в вызов функции WithAuthRedirect, потом === connect(mapStateToProps, mapDispatchToProps)(WithAuthRedirect(Dialogs))\r\n"],"sourceRoot":""}